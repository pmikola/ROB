% mainscript is rather short this timeclear all% primary component countcomp_count = 40; [tvec tlab tstv tstl] = readSets(); % let's look at the first digit in the training set#imshow(1-reshape(tvec(1,:), 28, 28)');% let's check labels in both sets[unique(tlab)'; unique(tstl)']% compute and perform PCA transformation[mu trmx] = prepTransform(tvec, comp_count);tvec = pcaTransform(tvec, mu, trmx);tstv = pcaTransform(tstv, mu, trmx);% let's shift labels by one to use labels directly as indicestlab += 1;tstl += 1;% To successfully prepare ensemble you have to implement perceptron function% I would use 10 first zeros and 10 fisrt ones % and only 2 first primary components% It'll allow printing of intermediate results in perceptron function%% YOUR CODE GOES HERE - testing of the perceptron functionclsNo = 10;classes = [1:clsNo];attribNo = 10;tvecPreTest = [];tlabPreTest = [];tstvPreTest = [];tstlPreTest = [];for i=1:columns(classes);    classLabel = classes(i);    indexes = tlab == classLabel;    tvecPreTest = [ tvecPreTest; tvec(indexes, 1:attribNo)(1:size(tvec(indexes, 1:attribNo))(1), :) ];    tlabPreTest = [ tlabPreTest; tlab(indexes, 1)(1:size(tlab(indexes, 1))(1), :) ];        indexes = tstl == classLabel;    tstvPreTest = [ tstvPreTest; tstv(indexes, 1:attribNo)(1:size(tstv(indexes, 1:attribNo))(1), :) ];    tstlPreTest = [ tstlPreTest; tstl(indexes, 1)(1:size(tstl(indexes, 1))(1), :) ];endfordisp("Training of the PreTest set...")ovoPreTest = trainOVOensamble(tvecPreTest, tlabPreTest, @perceptron);disp("Train of the PreTest set - done")disp("Check on PreTest set...")clabPreTest = unamvoting(tvecPreTest, ovoPreTest);cfmxPreTesttlab = confMx(tlabPreTest, clabPreTest);cErrorsPreTrainSet = compErrors(cfmxPreTesttlab)disp("...")clabPreTest = unamvoting(tstvPreTest, ovoPreTest);cfmxPreTesttstl = confMx(tstlPreTest, clabPreTest);cErrorsPreTestSet = compErrors(cfmxPreTesttstl)disp("Checking of the PreTest set - done")disp("Training of the whole set...")ovo = trainOVOensamble(tvec, tlab, @perceptron);disp("Training of the whole set - done")disp("Check on the whole set...")clab = unamvoting(tvec, ovo);cfmxtlab = confMx(tlab, clab)cErrorsTrainSet = compErrors(cfmxtlab)disp("...")clab = unamvoting(tstv, ovo);cfmxtstl = confMx(tstl, clab)cErrorsTestSet = compErrors(cfmxtstl)disp("Checking of the whole set - done")% YOUR CODE GOES HEREclassifiersErrorTrain = classifiersError(tvec, tlab, ovo);disp("Classifier Error Rate")classifiersErrorTrain([1 3], :)classifiersErrorRatesTrain = [classifiersErrorTrain{3, :}]';[_ posWorstTrain] = max(classifiersErrorRatesTrain, [], 1);disp("Worst classifier")classifiersErrorTrain(:, posWorstTrain)classifiersErrorTest = classifiersError(tstv, tstl, ovo);disp("Classifier Error Rate")classifiersErrorTest([1 3], :)classifiersErrorRatesTest = [classifiersErrorTest{3, :}]';[_ posWorstTest] = max(classifiersErrorRatesTest, [], 1);disp("Worst classifier")classifiersErrorTest(:, posWorstTest)